///
/// You probably don't want to use this. See span().
///
/// If you insist, this returns an expression, meant for calc(), that
/// corresponds to the width of $n columns and the enclosed gutters.
///
@function grid-unit($n, $columns: $grid-columns, $gutter: $gutter, $extra-gutters: 0) {
  @return unquote("#{$n/$columns*100%} + #{$gutter * ($n / $columns + $extra-gutters - 1)}");
}

///
/// Returns the width of $n columns of the grid and the enclosed gutters.
///
@function span($n, $columns: $grid-columns, $gutter: $gutter) {
    @return calc(#{grid-unit($n, $columns, $gutter)});
}

///
/// Returns the width of a $n column offset on the grid, including the last
/// gutter.
///
@function offset($n, $columns: $grid-columns, $gutter: $gutter) {
    @return calc(#{grid-unit($n, $columns, $gutter, 1)});
}

///
/// Returns the width for a $n column offset on the grid that does not include
/// the last gutter. Most commonly will be used with wide-span().
///
@function short-offset($n, $columns: $grid-columns, $gutter: $gutter) {
    @return span($n, $columns, $gutter);
}

///
/// Returns the width of $n columns of the grid along with both outer gutters.
///
@function wide-span($n, $columns: $grid-columns, $gutter: $gutter) {
    @return calc(#{grid-unit($n, $columns, $gutter, 2)});
}
@function wide-offset($n, $columns: $grid-columns, $gutter: $gutter) {
    @return wide-span($n, $columns, $gutter);
}


.example {
    background-color: aliceblue;
    text-align: center;
}

@for $i from 1 through $grid-columns {
    .span-#{$i} {
        width: span($i);
    }
}

@for $i from 0 through ($grid-columns - 2) {
    .offset-#{$i} {
        margin-left: offset($i);
    }
}

@for $i from 0 through ($grid-columns - 2) {
    .short-offset-#{$i} {
        margin-left: short-offset($i);
    }
}

@for $i from 1 through $grid-columns {
    .wide-span-#{$i} {
        width: wide-span($i);
    }
}

@for $i from 0 through $grid-columns {
    .wide-offset-#{$i} {
        margin-left: wide-offset($i);
    }
}
